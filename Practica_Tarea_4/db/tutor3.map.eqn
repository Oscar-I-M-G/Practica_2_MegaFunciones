-- Copyright (C) 1991-2007 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--C1_LCD_RS is LCD_Display:inst1|LCD_RS
C1_LCD_RS = DFFEAS(C1L135, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_LCD_E is LCD_Display:inst1|LCD_E
C1_LCD_E = DFFEAS(C1L98, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_LCD_RW_INT is LCD_Display:inst1|LCD_RW_INT
C1_LCD_RW_INT = DFFEAS(VCC, C1_CLK_400HZ, SW8,  , C1L100,  ,  ,  ,  );


--C1_state.print_string is LCD_Display:inst1|state.print_string
C1_state.print_string = DFFEAS(C1L186, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.drop_lcd_e is LCD_Display:inst1|state.drop_lcd_e
C1_state.drop_lcd_e = DFFEAS(C1L100, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.hold is LCD_Display:inst1|state.hold
C1_state.hold = DFFEAS(C1_state.drop_lcd_e, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L135 is LCD_Display:inst1|Selector1~38
C1L135 = C1_state.print_string # C1_LCD_RS & (C1_state.drop_lcd_e # C1_state.hold);


--C1_CLK_400HZ is LCD_Display:inst1|CLK_400HZ
C1_CLK_400HZ = DFFEAS(C1L20, CLK_48Mhz,  ,  ,  ,  ,  , !SW8,  );


--C1L98 is LCD_Display:inst1|LCD_E~9
C1L98 = C1_state.hold & (C1_LCD_E) # !C1_state.hold & C1_state.drop_lcd_e;


--C1L100 is LCD_Display:inst1|LCD_RS~0
C1L100 = !C1_state.drop_lcd_e & !C1_state.hold;


--C1_next_command.print_string is LCD_Display:inst1|next_command.print_string
C1_next_command.print_string = DFFEAS(C1L161, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L186 is LCD_Display:inst1|state~146
C1L186 = C1_state.hold & C1_next_command.print_string;


--C1_CLK_COUNT_400HZ[16] is LCD_Display:inst1|CLK_COUNT_400HZ[16]
C1_CLK_COUNT_400HZ[16] = DFFEAS(C1L72, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[17] is LCD_Display:inst1|CLK_COUNT_400HZ[17]
C1_CLK_COUNT_400HZ[17] = DFFEAS(C1L75, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[18] is LCD_Display:inst1|CLK_COUNT_400HZ[18]
C1_CLK_COUNT_400HZ[18] = DFFEAS(C1L78, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[19] is LCD_Display:inst1|CLK_COUNT_400HZ[19]
C1_CLK_COUNT_400HZ[19] = DFFEAS(C1L81, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1L102 is LCD_Display:inst1|LessThan0~261
C1L102 = !C1_CLK_COUNT_400HZ[16] & !C1_CLK_COUNT_400HZ[17] & !C1_CLK_COUNT_400HZ[18] & !C1_CLK_COUNT_400HZ[19];


--C1_CLK_COUNT_400HZ[13] is LCD_Display:inst1|CLK_COUNT_400HZ[13]
C1_CLK_COUNT_400HZ[13] = DFFEAS(C1L63, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[14] is LCD_Display:inst1|CLK_COUNT_400HZ[14]
C1_CLK_COUNT_400HZ[14] = DFFEAS(C1L66, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[15] is LCD_Display:inst1|CLK_COUNT_400HZ[15]
C1_CLK_COUNT_400HZ[15] = DFFEAS(C1L69, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1L103 is LCD_Display:inst1|LessThan0~262
C1L103 = !C1_CLK_COUNT_400HZ[15] # !C1_CLK_COUNT_400HZ[14] # !C1_CLK_COUNT_400HZ[13];


--C1_CLK_COUNT_400HZ[5] is LCD_Display:inst1|CLK_COUNT_400HZ[5]
C1_CLK_COUNT_400HZ[5] = DFFEAS(C1L39, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[6] is LCD_Display:inst1|CLK_COUNT_400HZ[6]
C1_CLK_COUNT_400HZ[6] = DFFEAS(C1L42, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[7] is LCD_Display:inst1|CLK_COUNT_400HZ[7]
C1_CLK_COUNT_400HZ[7] = DFFEAS(C1L45, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[8] is LCD_Display:inst1|CLK_COUNT_400HZ[8]
C1_CLK_COUNT_400HZ[8] = DFFEAS(C1L48, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1L104 is LCD_Display:inst1|LessThan0~263
C1L104 = !C1_CLK_COUNT_400HZ[7] & !C1_CLK_COUNT_400HZ[8] & (!C1_CLK_COUNT_400HZ[6] # !C1_CLK_COUNT_400HZ[5]);


--C1_CLK_COUNT_400HZ[9] is LCD_Display:inst1|CLK_COUNT_400HZ[9]
C1_CLK_COUNT_400HZ[9] = DFFEAS(C1L51, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[10] is LCD_Display:inst1|CLK_COUNT_400HZ[10]
C1_CLK_COUNT_400HZ[10] = DFFEAS(C1L54, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[11] is LCD_Display:inst1|CLK_COUNT_400HZ[11]
C1_CLK_COUNT_400HZ[11] = DFFEAS(C1L57, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1L105 is LCD_Display:inst1|LessThan0~264
C1L105 = !C1_CLK_COUNT_400HZ[10] & (C1L104 # !C1_CLK_COUNT_400HZ[9]) # !C1_CLK_COUNT_400HZ[11];


--C1_CLK_COUNT_400HZ[12] is LCD_Display:inst1|CLK_COUNT_400HZ[12]
C1_CLK_COUNT_400HZ[12] = DFFEAS(C1L60, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1L106 is LCD_Display:inst1|LessThan0~265
C1L106 = C1L102 & (C1L103 # C1L105 & !C1_CLK_COUNT_400HZ[12]);


--C1L20 is LCD_Display:inst1|CLK_400HZ~100
C1L20 = C1_CLK_400HZ $ !C1L106;


--C1_DATA_BUS_VALUE[7] is LCD_Display:inst1|DATA_BUS_VALUE[7]
C1_DATA_BUS_VALUE[7] = DFFEAS(C1L136, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[6] is LCD_Display:inst1|DATA_BUS_VALUE[6]
C1_DATA_BUS_VALUE[6] = DFFEAS(C1L138, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[5] is LCD_Display:inst1|DATA_BUS_VALUE[5]
C1_DATA_BUS_VALUE[5] = DFFEAS(C1L142, C1_CLK_400HZ, SW8,  , C1L100,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[4] is LCD_Display:inst1|DATA_BUS_VALUE[4]
C1_DATA_BUS_VALUE[4] = DFFEAS(C1L144, C1_CLK_400HZ, SW8,  , C1L100,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[3] is LCD_Display:inst1|DATA_BUS_VALUE[3]
C1_DATA_BUS_VALUE[3] = DFFEAS(C1L148, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[2] is LCD_Display:inst1|DATA_BUS_VALUE[2]
C1_DATA_BUS_VALUE[2] = DFFEAS(C1L151, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[1] is LCD_Display:inst1|DATA_BUS_VALUE[1]
C1_DATA_BUS_VALUE[1] = DFFEAS(C1L153, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_DATA_BUS_VALUE[0] is LCD_Display:inst1|DATA_BUS_VALUE[0]
C1_DATA_BUS_VALUE[0] = DFFEAS(C1L156, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_CHAR_COUNT[4] is LCD_Display:inst1|CHAR_COUNT[4]
C1_CHAR_COUNT[4] = DFFEAS(C1L17, C1_CLK_400HZ,  ,  , SW8, C1L168,  ,  , !C1_state.print_string);


--C1_CHAR_COUNT[1] is LCD_Display:inst1|CHAR_COUNT[1]
C1_CHAR_COUNT[1] = DFFEAS(C1L8, C1_CLK_400HZ,  ,  , SW8, C1L171,  ,  , !C1_state.print_string);


--C1_CHAR_COUNT[2] is LCD_Display:inst1|CHAR_COUNT[2]
C1_CHAR_COUNT[2] = DFFEAS(C1L11, C1_CLK_400HZ,  ,  , SW8, C1L170,  ,  , !C1_state.print_string);


--C1L111 is LCD_Display:inst1|Mux3~313
C1L111 = C1_CHAR_COUNT[1] & C1_CHAR_COUNT[2];


--C1_CHAR_COUNT[0] is LCD_Display:inst1|CHAR_COUNT[0]
C1_CHAR_COUNT[0] = DFFEAS(C1L5, C1_CLK_400HZ,  ,  , SW8, C1L172,  ,  , !C1_state.print_string);


--C1_CHAR_COUNT[3] is LCD_Display:inst1|CHAR_COUNT[3]
C1_CHAR_COUNT[3] = DFFEAS(C1L14, C1_CLK_400HZ,  ,  , SW8, C1L169,  ,  , !C1_state.print_string);


--C1L96 is LCD_Display:inst1|Equal3~22
C1L96 = C1_CHAR_COUNT[4] & C1L111 & C1_CHAR_COUNT[0] & C1_CHAR_COUNT[3];


--C1L95 is LCD_Display:inst1|Equal2~35
C1L95 = C1L111 & C1_CHAR_COUNT[0] & C1_CHAR_COUNT[3] & !C1_CHAR_COUNT[4];


--C1L160 is LCD_Display:inst1|Selector15~107
C1L160 = C1_state.print_string & !C1L96 & !C1L95;


--C1_state.mode_set is LCD_Display:inst1|state.mode_set
C1_state.mode_set = DFFEAS(C1L187, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.line2 is LCD_Display:inst1|state.line2
C1_state.line2 = DFFEAS(C1L188, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.return_home is LCD_Display:inst1|state.return_home
C1_state.return_home = DFFEAS(C1L189, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L139 is LCD_Display:inst1|Selector4~266
C1L139 = !C1_state.mode_set & !C1_state.line2 & !C1_state.return_home;


--C1L161 is LCD_Display:inst1|Selector15~108
C1L161 = C1L160 # !C1L100 & C1_next_command.print_string # !C1L139;


--C1_CLK_COUNT_400HZ[4] is LCD_Display:inst1|CLK_COUNT_400HZ[4]
C1_CLK_COUNT_400HZ[4] = DFFEAS(C1L36, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[3] is LCD_Display:inst1|CLK_COUNT_400HZ[3]
C1_CLK_COUNT_400HZ[3] = DFFEAS(C1L32, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[2] is LCD_Display:inst1|CLK_COUNT_400HZ[2]
C1_CLK_COUNT_400HZ[2] = DFFEAS(C1L29, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[1] is LCD_Display:inst1|CLK_COUNT_400HZ[1]
C1_CLK_COUNT_400HZ[1] = DFFEAS(C1L26, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1_CLK_COUNT_400HZ[0] is LCD_Display:inst1|CLK_COUNT_400HZ[0]
C1_CLK_COUNT_400HZ[0] = DFFEAS(C1L23, CLK_48Mhz,  ,  ,  ,  ,  , C1L34,  );


--C1L23 is LCD_Display:inst1|CLK_COUNT_400HZ[0]~206
C1L23 = C1_CLK_COUNT_400HZ[0] $ VCC;

--C1L24 is LCD_Display:inst1|CLK_COUNT_400HZ[0]~299
C1L24 = CARRY(C1_CLK_COUNT_400HZ[0]);


--C1L26 is LCD_Display:inst1|CLK_COUNT_400HZ[1]~205
C1L26 = C1_CLK_COUNT_400HZ[1] & !C1L24 # !C1_CLK_COUNT_400HZ[1] & (C1L24 # GND);

--C1L27 is LCD_Display:inst1|CLK_COUNT_400HZ[1]~300
C1L27 = CARRY(!C1L24 # !C1_CLK_COUNT_400HZ[1]);


--C1L29 is LCD_Display:inst1|CLK_COUNT_400HZ[2]~204
C1L29 = C1_CLK_COUNT_400HZ[2] & (C1L27 $ GND) # !C1_CLK_COUNT_400HZ[2] & !C1L27 & VCC;

--C1L30 is LCD_Display:inst1|CLK_COUNT_400HZ[2]~301
C1L30 = CARRY(C1_CLK_COUNT_400HZ[2] & !C1L27);


--C1L32 is LCD_Display:inst1|CLK_COUNT_400HZ[3]~203
C1L32 = C1_CLK_COUNT_400HZ[3] & !C1L30 # !C1_CLK_COUNT_400HZ[3] & (C1L30 # GND);

--C1L33 is LCD_Display:inst1|CLK_COUNT_400HZ[3]~302
C1L33 = CARRY(!C1L30 # !C1_CLK_COUNT_400HZ[3]);


--C1L36 is LCD_Display:inst1|CLK_COUNT_400HZ[4]~202
C1L36 = C1_CLK_COUNT_400HZ[4] & (C1L33 $ GND) # !C1_CLK_COUNT_400HZ[4] & !C1L33 & VCC;

--C1L37 is LCD_Display:inst1|CLK_COUNT_400HZ[4]~303
C1L37 = CARRY(C1_CLK_COUNT_400HZ[4] & !C1L33);


--C1L39 is LCD_Display:inst1|CLK_COUNT_400HZ[5]~200
C1L39 = C1_CLK_COUNT_400HZ[5] & !C1L37 # !C1_CLK_COUNT_400HZ[5] & (C1L37 # GND);

--C1L40 is LCD_Display:inst1|CLK_COUNT_400HZ[5]~304
C1L40 = CARRY(!C1L37 # !C1_CLK_COUNT_400HZ[5]);


--C1L42 is LCD_Display:inst1|CLK_COUNT_400HZ[6]~201
C1L42 = C1_CLK_COUNT_400HZ[6] & (C1L40 $ GND) # !C1_CLK_COUNT_400HZ[6] & !C1L40 & VCC;

--C1L43 is LCD_Display:inst1|CLK_COUNT_400HZ[6]~305
C1L43 = CARRY(C1_CLK_COUNT_400HZ[6] & !C1L40);


--C1L45 is LCD_Display:inst1|CLK_COUNT_400HZ[7]~198
C1L45 = C1_CLK_COUNT_400HZ[7] & !C1L43 # !C1_CLK_COUNT_400HZ[7] & (C1L43 # GND);

--C1L46 is LCD_Display:inst1|CLK_COUNT_400HZ[7]~306
C1L46 = CARRY(!C1L43 # !C1_CLK_COUNT_400HZ[7]);


--C1L48 is LCD_Display:inst1|CLK_COUNT_400HZ[8]~199
C1L48 = C1_CLK_COUNT_400HZ[8] & (C1L46 $ GND) # !C1_CLK_COUNT_400HZ[8] & !C1L46 & VCC;

--C1L49 is LCD_Display:inst1|CLK_COUNT_400HZ[8]~307
C1L49 = CARRY(C1_CLK_COUNT_400HZ[8] & !C1L46);


--C1L51 is LCD_Display:inst1|CLK_COUNT_400HZ[9]~197
C1L51 = C1_CLK_COUNT_400HZ[9] & !C1L49 # !C1_CLK_COUNT_400HZ[9] & (C1L49 # GND);

--C1L52 is LCD_Display:inst1|CLK_COUNT_400HZ[9]~308
C1L52 = CARRY(!C1L49 # !C1_CLK_COUNT_400HZ[9]);


--C1L54 is LCD_Display:inst1|CLK_COUNT_400HZ[10]~196
C1L54 = C1_CLK_COUNT_400HZ[10] & (C1L52 $ GND) # !C1_CLK_COUNT_400HZ[10] & !C1L52 & VCC;

--C1L55 is LCD_Display:inst1|CLK_COUNT_400HZ[10]~309
C1L55 = CARRY(C1_CLK_COUNT_400HZ[10] & !C1L52);


--C1L57 is LCD_Display:inst1|CLK_COUNT_400HZ[11]~195
C1L57 = C1_CLK_COUNT_400HZ[11] & !C1L55 # !C1_CLK_COUNT_400HZ[11] & (C1L55 # GND);

--C1L58 is LCD_Display:inst1|CLK_COUNT_400HZ[11]~310
C1L58 = CARRY(!C1L55 # !C1_CLK_COUNT_400HZ[11]);


--C1L60 is LCD_Display:inst1|CLK_COUNT_400HZ[12]~194
C1L60 = C1_CLK_COUNT_400HZ[12] & (C1L58 $ GND) # !C1_CLK_COUNT_400HZ[12] & !C1L58 & VCC;

--C1L61 is LCD_Display:inst1|CLK_COUNT_400HZ[12]~311
C1L61 = CARRY(C1_CLK_COUNT_400HZ[12] & !C1L58);


--C1L63 is LCD_Display:inst1|CLK_COUNT_400HZ[13]~191
C1L63 = C1_CLK_COUNT_400HZ[13] & !C1L61 # !C1_CLK_COUNT_400HZ[13] & (C1L61 # GND);

--C1L64 is LCD_Display:inst1|CLK_COUNT_400HZ[13]~312
C1L64 = CARRY(!C1L61 # !C1_CLK_COUNT_400HZ[13]);


--C1L66 is LCD_Display:inst1|CLK_COUNT_400HZ[14]~192
C1L66 = C1_CLK_COUNT_400HZ[14] & (C1L64 $ GND) # !C1_CLK_COUNT_400HZ[14] & !C1L64 & VCC;

--C1L67 is LCD_Display:inst1|CLK_COUNT_400HZ[14]~313
C1L67 = CARRY(C1_CLK_COUNT_400HZ[14] & !C1L64);


--C1L69 is LCD_Display:inst1|CLK_COUNT_400HZ[15]~193
C1L69 = C1_CLK_COUNT_400HZ[15] & !C1L67 # !C1_CLK_COUNT_400HZ[15] & (C1L67 # GND);

--C1L70 is LCD_Display:inst1|CLK_COUNT_400HZ[15]~314
C1L70 = CARRY(!C1L67 # !C1_CLK_COUNT_400HZ[15]);


--C1L72 is LCD_Display:inst1|CLK_COUNT_400HZ[16]~187
C1L72 = C1_CLK_COUNT_400HZ[16] & (C1L70 $ GND) # !C1_CLK_COUNT_400HZ[16] & !C1L70 & VCC;

--C1L73 is LCD_Display:inst1|CLK_COUNT_400HZ[16]~315
C1L73 = CARRY(C1_CLK_COUNT_400HZ[16] & !C1L70);


--C1L34 is LCD_Display:inst1|CLK_COUNT_400HZ[3]~316
C1L34 = !C1L106 # !SW8;


--C1L75 is LCD_Display:inst1|CLK_COUNT_400HZ[17]~188
C1L75 = C1_CLK_COUNT_400HZ[17] & !C1L73 # !C1_CLK_COUNT_400HZ[17] & (C1L73 # GND);

--C1L76 is LCD_Display:inst1|CLK_COUNT_400HZ[17]~317
C1L76 = CARRY(!C1L73 # !C1_CLK_COUNT_400HZ[17]);


--C1L78 is LCD_Display:inst1|CLK_COUNT_400HZ[18]~189
C1L78 = C1_CLK_COUNT_400HZ[18] & (C1L76 $ GND) # !C1_CLK_COUNT_400HZ[18] & !C1L76 & VCC;

--C1L79 is LCD_Display:inst1|CLK_COUNT_400HZ[18]~318
C1L79 = CARRY(C1_CLK_COUNT_400HZ[18] & !C1L76);


--C1L81 is LCD_Display:inst1|CLK_COUNT_400HZ[19]~190
C1L81 = C1_CLK_COUNT_400HZ[19] $ C1L79;


--C1L136 is LCD_Display:inst1|Selector2~43
C1L136 = C1_state.line2 # C1_state.return_home # !C1L100 & C1_DATA_BUS_VALUE[7];


--C1L108 is LCD_Display:inst1|Mux0~33
C1L108 = C1_CHAR_COUNT[1] & (C1_CHAR_COUNT[2] # C1_CHAR_COUNT[4]) # !C1_CHAR_COUNT[1] & C1_CHAR_COUNT[2] & (C1_CHAR_COUNT[0] # C1_CHAR_COUNT[4]);


--C1L109 is LCD_Display:inst1|Mux1~83
C1L109 = C1_CHAR_COUNT[1] & (C1_CHAR_COUNT[4] # !C1_CHAR_COUNT[2]) # !C1_CHAR_COUNT[1] & (C1_CHAR_COUNT[2] # C1_CHAR_COUNT[0] & !C1_CHAR_COUNT[4]);


--C1L110 is LCD_Display:inst1|Mux2~29
C1L110 = C1_CHAR_COUNT[1] & !C1_CHAR_COUNT[0] & !C1_CHAR_COUNT[2] # !C1_CHAR_COUNT[1] & (C1_CHAR_COUNT[2] & !C1_CHAR_COUNT[4]);


--C1L94 is LCD_Display:inst1|Equal0~38
C1L94 = C1L108 & !C1_CHAR_COUNT[3] & !C1L109 & !C1L110;


--C1L92 is LCD_Display:inst1|DATA_BUS_VALUE~532
C1L92 = C1_CHAR_COUNT[3] # C1L108;


--C1L115 is LCD_Display:inst1|Mux4~371
C1L115 = !C1_CHAR_COUNT[2] & !C1_CHAR_COUNT[3];


--G1_safe_q[1] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[1]
G1_safe_q[1] = DFFEAS(G1_counter_comb_bita1, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--G1_safe_q[5] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[5]
G1_safe_q[5] = DFFEAS(G1_counter_comb_bita5, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--C1L119 is LCD_Display:inst1|Mux5~408
C1L119 = C1_CHAR_COUNT[1] & (C1_CHAR_COUNT[0] & G1_safe_q[1] # !C1_CHAR_COUNT[0] & (G1_safe_q[5]));


--C1L120 is LCD_Display:inst1|Mux5~409
C1L120 = C1_CHAR_COUNT[4] $ (!C1_CHAR_COUNT[0] & C1_CHAR_COUNT[1]);


--C1L112 is LCD_Display:inst1|Mux3~314
C1L112 = C1_CHAR_COUNT[4] # C1_CHAR_COUNT[3] # !C1_CHAR_COUNT[2];


--C1L121 is LCD_Display:inst1|Mux5~410
C1L121 = C1L115 & (C1L119 & !C1L112 # !C1L120) # !C1L115 & C1L119 & (!C1L112);


--C1L116 is LCD_Display:inst1|Mux4~372
C1L116 = C1_CHAR_COUNT[4] & (!C1_CHAR_COUNT[1]) # !C1_CHAR_COUNT[4] & (C1_CHAR_COUNT[0] # C1_CHAR_COUNT[1]);


--G1_safe_q[2] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[2]
G1_safe_q[2] = DFFEAS(G1_counter_comb_bita2, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--G1_safe_q[6] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[6]
G1_safe_q[6] = DFFEAS(G1_counter_comb_bita6, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--C1L117 is LCD_Display:inst1|Mux4~373
C1L117 = C1_CHAR_COUNT[0] & G1_safe_q[2] # !C1_CHAR_COUNT[0] & (G1_safe_q[6]) # !C1_CHAR_COUNT[1];


--C1L118 is LCD_Display:inst1|Mux4~374
C1L118 = C1L115 & (C1L116 # C1L117 & !C1L112) # !C1L115 & (C1L117 & !C1L112);


--G1_safe_q[3] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[3]
G1_safe_q[3] = DFFEAS(G1_counter_comb_bita3, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--G1_safe_q[7] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[7]
G1_safe_q[7] = DFFEAS(G1_counter_comb_bita7, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--C1L113 is LCD_Display:inst1|Mux3~315
C1L113 = C1_CHAR_COUNT[0] & (G1_safe_q[3] # !C1L111) # !C1_CHAR_COUNT[0] & (G1_safe_q[7] & C1L111);


--C1L114 is LCD_Display:inst1|Mux3~316
C1L114 = C1L113 & !C1_CHAR_COUNT[4] & !C1_CHAR_COUNT[3];


--C1L107 is LCD_Display:inst1|LessThan1~76
C1L107 = !C1L121 & !C1L118 # !C1L114;


--C1L137 is LCD_Display:inst1|Selector3~253
C1L137 = C1_state.print_string & (C1L94 & (!C1L107) # !C1L94 & !C1L92);


--C1L138 is LCD_Display:inst1|Selector3~254
C1L138 = C1_state.line2 # C1L137 # !C1L100 & C1_DATA_BUS_VALUE[6];


--C1L140 is LCD_Display:inst1|Selector4~267
C1L140 = C1_CHAR_COUNT[3] # C1L109 # C1L94 & C1L107;


--C1_state.display_clear is LCD_Display:inst1|state.display_clear
C1_state.display_clear = DFFEAS(C1L190, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.display_on is LCD_Display:inst1|state.display_on
C1_state.display_on = DFFEAS(C1L191, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.display_off is LCD_Display:inst1|state.display_off
C1_state.display_off = DFFEAS(C1L192, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L141 is LCD_Display:inst1|Selector4~268
C1L141 = !C1_state.display_clear & !C1_state.display_on & !C1_state.display_off;


--C1L142 is LCD_Display:inst1|Selector4~269
C1L142 = C1_state.print_string & !C1L140 # !C1_state.print_string & (!C1L141 # !C1L139);


--C1L143 is LCD_Display:inst1|Selector5~234
C1L143 = C1L94 & (C1L107 # C1L110 & !C1_CHAR_COUNT[3]) # !C1L94 & (C1L110 & !C1_CHAR_COUNT[3]);


--C1L144 is LCD_Display:inst1|Selector5~235
C1L144 = C1_state.print_string & !C1L143 # !C1_state.print_string & (!C1L141 # !C1L139);


--G1_safe_q[0] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[0]
G1_safe_q[0] = DFFEAS(G1_counter_comb_bita0, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--G1_safe_q[4] is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|safe_q[4]
G1_safe_q[4] = DFFEAS(G1_counter_comb_bita4, E1_pb_debounced, SW8,  ,  ,  ,  ,  ,  );


--C1L122 is LCD_Display:inst1|Mux6~344
C1L122 = C1_CHAR_COUNT[0] & (G1_safe_q[0] # !C1_CHAR_COUNT[1]) # !C1_CHAR_COUNT[0] & (G1_safe_q[4] & C1_CHAR_COUNT[1]);


--C1L123 is LCD_Display:inst1|Mux6~345
C1L123 = C1_CHAR_COUNT[0] & C1_CHAR_COUNT[1] # !C1_CHAR_COUNT[0] & (C1_CHAR_COUNT[4]) # !C1L115;


--C1L124 is LCD_Display:inst1|Mux6~346
C1L124 = C1L122 & !C1L112 # !C1L123;


--C1L1 is LCD_Display:inst1|Add1~324
C1L1 = C1L121 # C1L118 # C1L124;


--C1L93 is LCD_Display:inst1|DATA_BUS_VALUE~533
C1L93 = C1L94 & C1L114 & (C1L121 # C1L118);


--C1L145 is LCD_Display:inst1|Selector6~217
C1L145 = C1_state.print_string & (C1L114 $ (C1L1 & C1L93));


--C1_state.reset1 is LCD_Display:inst1|state.reset1
C1_state.reset1 = DFFEAS(VCC, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L146 is LCD_Display:inst1|Selector6~218
C1L146 = !C1_DATA_BUS_VALUE[3] & (C1_state.drop_lcd_e # C1_state.hold) # !C1_state.reset1;


--C1_state.reset3 is LCD_Display:inst1|state.reset3
C1_state.reset3 = DFFEAS(C1L193, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.func_set is LCD_Display:inst1|state.func_set
C1_state.func_set = DFFEAS(C1L194, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1_state.reset2 is LCD_Display:inst1|state.reset2
C1_state.reset2 = DFFEAS(C1L195, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L147 is LCD_Display:inst1|Selector6~219
C1L147 = C1_state.display_on # C1_state.display_off # C1_state.func_set # C1_state.reset2;


--C1L148 is LCD_Display:inst1|Selector6~220
C1L148 = !C1L145 & !C1L146 & !C1_state.reset3 & !C1L147;


--C1L2 is LCD_Display:inst1|Add1~325
C1L2 = C1L121 # C1L122 & !C1L112 # !C1L123;


--C1L149 is LCD_Display:inst1|Selector7~181
C1L149 = C1_state.print_string & (C1L118 $ (!C1L2 & C1L93));


--C1L150 is LCD_Display:inst1|Selector7~182
C1L150 = C1_DATA_BUS_VALUE[2] & (C1_state.drop_lcd_e # C1_state.hold);


--C1L151 is LCD_Display:inst1|Selector7~183
C1L151 = C1_state.mode_set # C1_state.display_on # C1L149 # C1L150;


--C1L152 is LCD_Display:inst1|Selector8~158
C1L152 = C1_state.print_string & (C1L121 $ (!C1L124 & C1L93));


--C1L153 is LCD_Display:inst1|Selector8~159
C1L153 = C1_state.mode_set # C1L152 # !C1L100 & C1_DATA_BUS_VALUE[1];


--C1L154 is LCD_Display:inst1|Selector9~180
C1L154 = C1_state.display_clear # C1_DATA_BUS_VALUE[0] & (C1_state.drop_lcd_e # C1_state.hold);


--C1L155 is LCD_Display:inst1|Selector9~181
C1L155 = C1L124 $ (C1L94 & !C1L107);


--C1L156 is LCD_Display:inst1|Selector9~182
C1L156 = C1L154 # C1_state.print_string & C1L155;


--C1L5 is LCD_Display:inst1|CHAR_COUNT[0]~43
C1L5 = C1_CHAR_COUNT[0] $ VCC;

--C1L6 is LCD_Display:inst1|CHAR_COUNT[0]~157
C1L6 = CARRY(C1_CHAR_COUNT[0]);


--C1L8 is LCD_Display:inst1|CHAR_COUNT[1]~44
C1L8 = C1_CHAR_COUNT[1] & !C1L6 # !C1_CHAR_COUNT[1] & (C1L6 # GND);

--C1L9 is LCD_Display:inst1|CHAR_COUNT[1]~158
C1L9 = CARRY(!C1L6 # !C1_CHAR_COUNT[1]);


--C1L11 is LCD_Display:inst1|CHAR_COUNT[2]~45
C1L11 = C1_CHAR_COUNT[2] & (C1L9 $ GND) # !C1_CHAR_COUNT[2] & !C1L9 & VCC;

--C1L12 is LCD_Display:inst1|CHAR_COUNT[2]~159
C1L12 = CARRY(C1_CHAR_COUNT[2] & !C1L9);


--C1L14 is LCD_Display:inst1|CHAR_COUNT[3]~46
C1L14 = C1_CHAR_COUNT[3] & !C1L12 # !C1_CHAR_COUNT[3] & (C1L12 # GND);

--C1L15 is LCD_Display:inst1|CHAR_COUNT[3]~160
C1L15 = CARRY(!C1L12 # !C1_CHAR_COUNT[3]);


--C1L17 is LCD_Display:inst1|CHAR_COUNT[4]~47
C1L17 = C1_CHAR_COUNT[4] $ !C1L15;


--C1L168 is LCD_Display:inst1|Selector22~17
C1L168 = C1_CHAR_COUNT[4] & C1_state.reset1;


--C1L171 is LCD_Display:inst1|Selector25~17
C1L171 = C1_CHAR_COUNT[1] & C1_state.reset1;


--C1L170 is LCD_Display:inst1|Selector24~17
C1L170 = C1_CHAR_COUNT[2] & C1_state.reset1;


--C1L172 is LCD_Display:inst1|Selector26~17
C1L172 = C1_CHAR_COUNT[0] & C1_state.reset1;


--C1L169 is LCD_Display:inst1|Selector23~17
C1L169 = C1_CHAR_COUNT[3] & C1_state.reset1;


--C1_next_command.mode_set is LCD_Display:inst1|next_command.mode_set
C1_next_command.mode_set = DFFEAS(C1L159, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L187 is LCD_Display:inst1|state~147
C1L187 = C1_state.hold & C1_next_command.mode_set;


--C1_next_command.line2 is LCD_Display:inst1|next_command.line2
C1_next_command.line2 = DFFEAS(C1L162, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L188 is LCD_Display:inst1|state~148
C1L188 = C1_state.hold & C1_next_command.line2;


--C1_next_command.return_home is LCD_Display:inst1|next_command.return_home
C1_next_command.return_home = DFFEAS(C1L163, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L189 is LCD_Display:inst1|state~149
C1L189 = C1_state.hold & C1_next_command.return_home;


--E1_pb_debounced is debounce:inst3|pb_debounced
E1_pb_debounced = DFFEAS(E1L1, B1_clock_100Hz,  ,  ,  ,  ,  ,  ,  );


--G1_counter_comb_bita0 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita0
G1_counter_comb_bita0 = G1_safe_q[0] $ VCC;

--G1L2 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita0~COUT
G1L2 = CARRY(G1_safe_q[0]);


--G1_counter_comb_bita1 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita1
G1_counter_comb_bita1 = G1_safe_q[1] & !G1L2 # !G1_safe_q[1] & (G1L2 # GND);

--G1L4 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita1~COUT
G1L4 = CARRY(!G1L2 # !G1_safe_q[1]);


--G1_counter_comb_bita2 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita2
G1_counter_comb_bita2 = G1_safe_q[2] & (G1L4 $ GND) # !G1_safe_q[2] & !G1L4 & VCC;

--G1L6 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita2~COUT
G1L6 = CARRY(G1_safe_q[2] & !G1L4);


--G1_counter_comb_bita3 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita3
G1_counter_comb_bita3 = G1_safe_q[3] & !G1L6 # !G1_safe_q[3] & (G1L6 # GND);

--G1L8 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita3~COUT
G1L8 = CARRY(!G1L6 # !G1_safe_q[3]);


--G1_counter_comb_bita4 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita4
G1_counter_comb_bita4 = G1_safe_q[4] & (G1L8 $ GND) # !G1_safe_q[4] & !G1L8 & VCC;

--G1L10 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita4~COUT
G1L10 = CARRY(G1_safe_q[4] & !G1L8);


--G1_counter_comb_bita5 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita5
G1_counter_comb_bita5 = G1_safe_q[5] & !G1L10 # !G1_safe_q[5] & (G1L10 # GND);

--G1L12 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita5~COUT
G1L12 = CARRY(!G1L10 # !G1_safe_q[5]);


--G1_counter_comb_bita6 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita6
G1_counter_comb_bita6 = G1_safe_q[6] & (G1L12 $ GND) # !G1_safe_q[6] & !G1L12 & VCC;

--G1L14 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita6~COUT
G1L14 = CARRY(G1_safe_q[6] & !G1L12);


--G1_counter_comb_bita7 is lpm_counter0:inst2|lpm_counter:lpm_counter_component|cntr_u2i:auto_generated|counter_comb_bita7
G1_counter_comb_bita7 = G1_safe_q[7] $ G1L14;


--C1_next_command.display_clear is LCD_Display:inst1|next_command.display_clear
C1_next_command.display_clear = DFFEAS(C1L167, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L190 is LCD_Display:inst1|state~150
C1L190 = C1_state.hold & C1_next_command.display_clear;


--C1_next_command.display_on is LCD_Display:inst1|next_command.display_on
C1_next_command.display_on = DFFEAS(C1L158, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L191 is LCD_Display:inst1|state~151
C1L191 = C1_state.hold & C1_next_command.display_on;


--C1_next_command.display_off is LCD_Display:inst1|next_command.display_off
C1_next_command.display_off = DFFEAS(C1L166, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L192 is LCD_Display:inst1|state~152
C1L192 = C1_state.hold & C1_next_command.display_off;


--C1_next_command.reset3 is LCD_Display:inst1|next_command.reset3
C1_next_command.reset3 = DFFEAS(C1L165, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L193 is LCD_Display:inst1|state~153
C1L193 = C1_state.hold & C1_next_command.reset3;


--C1_next_command.func_set is LCD_Display:inst1|next_command.func_set
C1_next_command.func_set = DFFEAS(C1L157, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L194 is LCD_Display:inst1|state~154
C1L194 = C1_state.hold & C1_next_command.func_set;


--C1_next_command.reset2 is LCD_Display:inst1|next_command.reset2
C1_next_command.reset2 = DFFEAS(C1L164, C1_CLK_400HZ, SW8,  ,  ,  ,  ,  ,  );


--C1L195 is LCD_Display:inst1|state~155
C1L195 = !C1_next_command.reset2 & C1_state.hold;


--C1L159 is LCD_Display:inst1|Selector14~38
C1L159 = C1_state.display_on # C1_next_command.mode_set & (C1_state.drop_lcd_e # C1_state.hold);


--C1L162 is LCD_Display:inst1|Selector16~40
C1L162 = C1_state.print_string & (C1L95 # !C1L100 & C1_next_command.line2) # !C1_state.print_string & !C1L100 & C1_next_command.line2;


--C1L163 is LCD_Display:inst1|Selector17~40
C1L163 = C1_state.print_string & (C1L96 # !C1L100 & C1_next_command.return_home) # !C1_state.print_string & !C1L100 & C1_next_command.return_home;


--E1_SHIFT_PB[0] is debounce:inst3|SHIFT_PB[0]
E1_SHIFT_PB[0] = DFFEAS(E1_SHIFT_PB[1], B1_clock_100Hz,  ,  ,  ,  ,  ,  ,  );


--E1_SHIFT_PB[1] is debounce:inst3|SHIFT_PB[1]
E1_SHIFT_PB[1] = DFFEAS(E1_SHIFT_PB[2], B1_clock_100Hz,  ,  ,  ,  ,  ,  ,  );


--E1_SHIFT_PB[2] is debounce:inst3|SHIFT_PB[2]
E1_SHIFT_PB[2] = DFFEAS(E1_SHIFT_PB[3], B1_clock_100Hz,  ,  ,  ,  ,  ,  ,  );


--E1_SHIFT_PB[3] is debounce:inst3|SHIFT_PB[3]
E1_SHIFT_PB[3] = DFFEAS(E1L8, B1_clock_100Hz,  ,  ,  ,  ,  ,  ,  );


--E1L1 is debounce:inst3|Equal0~34
E1L1 = E1_SHIFT_PB[0] # E1_SHIFT_PB[1] # E1_SHIFT_PB[2] # E1_SHIFT_PB[3];


--B1_clock_100Hz is clk_div:inst|clock_100Hz
B1_clock_100Hz = DFFEAS(B1_clock_100hz_reg, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--C1L167 is LCD_Display:inst1|Selector21~38
C1L167 = C1_state.display_off # C1_next_command.display_clear & (C1_state.drop_lcd_e # C1_state.hold);


--C1L158 is LCD_Display:inst1|Selector13~38
C1L158 = C1_state.display_clear # C1_next_command.display_on & (C1_state.drop_lcd_e # C1_state.hold);


--C1L166 is LCD_Display:inst1|Selector20~38
C1L166 = C1_state.func_set # C1_next_command.display_off & (C1_state.drop_lcd_e # C1_state.hold);


--C1L165 is LCD_Display:inst1|Selector19~38
C1L165 = C1_state.reset2 # C1_next_command.reset3 & (C1_state.drop_lcd_e # C1_state.hold);


--C1L157 is LCD_Display:inst1|Selector12~38
C1L157 = C1_state.reset3 # C1_next_command.func_set & (C1_state.drop_lcd_e # C1_state.hold);


--C1L164 is LCD_Display:inst1|Selector18~38
C1L164 = C1_state.reset1 & (C1_next_command.reset2 # !C1_state.drop_lcd_e & !C1_state.hold);


--B1_clock_100hz_reg is clk_div:inst|clock_100hz_reg
B1_clock_100hz_reg = DFFEAS(B1_clock_100hz_int, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--B1_clock_100hz_int is clk_div:inst|clock_100hz_int
B1_clock_100hz_int = DFFEAS(B1L11, B1_clock_1Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_100hz[0] is clk_div:inst|count_100hz[0]
B1_count_100hz[0] = DFFEAS(B1L57, B1_clock_1Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_100hz[1] is clk_div:inst|count_100hz[1]
B1_count_100hz[1] = DFFEAS(B1L55, B1_clock_1Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_100hz[2] is clk_div:inst|count_100hz[2]
B1_count_100hz[2] = DFFEAS(B1L58, B1_clock_1Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1L11 is clk_div:inst|clock_100hz_int~23
B1L11 = B1_clock_100hz_int $ (!B1_count_100hz[0] & !B1_count_100hz[1] & B1_count_100hz[2]);


--B1_clock_1Khz_reg is clk_div:inst|clock_1Khz_reg
B1_clock_1Khz_reg = DFFEAS(B1_clock_1Khz_int, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--B1L57 is clk_div:inst|count_100hz~56
B1L57 = !B1_count_100hz[0] & (B1_count_100hz[1] # !B1_count_100hz[2]);


--B1L55 is clk_div:inst|count_100hz[1]~57
B1L55 = B1_count_100hz[0] $ B1_count_100hz[1];


--B1L58 is clk_div:inst|count_100hz~58
B1L58 = B1_count_100hz[0] & (B1_count_100hz[1] $ B1_count_100hz[2]) # !B1_count_100hz[0] & B1_count_100hz[1] & B1_count_100hz[2];


--B1_clock_1Khz_int is clk_div:inst|clock_1Khz_int
B1_clock_1Khz_int = DFFEAS(B1L2, B1_clock_10Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_1Khz[0] is clk_div:inst|count_1Khz[0]
B1_count_1Khz[0] = DFFEAS(B1L21, B1_clock_10Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_1Khz[1] is clk_div:inst|count_1Khz[1]
B1_count_1Khz[1] = DFFEAS(B1L19, B1_clock_10Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_1Khz[2] is clk_div:inst|count_1Khz[2]
B1_count_1Khz[2] = DFFEAS(B1L22, B1_clock_10Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1L2 is clk_div:inst|clock_1Khz_int~23
B1L2 = B1_clock_1Khz_int $ (!B1_count_1Khz[0] & !B1_count_1Khz[1] & B1_count_1Khz[2]);


--B1_clock_10Khz_reg is clk_div:inst|clock_10Khz_reg
B1_clock_10Khz_reg = DFFEAS(B1_clock_10Khz_int, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--B1L21 is clk_div:inst|count_1Khz~56
B1L21 = !B1_count_1Khz[0] & (B1_count_1Khz[1] # !B1_count_1Khz[2]);


--B1L19 is clk_div:inst|count_1Khz[1]~57
B1L19 = B1_count_1Khz[0] $ B1_count_1Khz[1];


--B1L22 is clk_div:inst|count_1Khz~58
B1L22 = B1_count_1Khz[0] & (B1_count_1Khz[1] $ B1_count_1Khz[2]) # !B1_count_1Khz[0] & B1_count_1Khz[1] & B1_count_1Khz[2];


--B1_clock_10Khz_int is clk_div:inst|clock_10Khz_int
B1_clock_10Khz_int = DFFEAS(B1L7, B1_clock_100Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_10Khz[0] is clk_div:inst|count_10Khz[0]
B1_count_10Khz[0] = DFFEAS(B1L50, B1_clock_100Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_10Khz[1] is clk_div:inst|count_10Khz[1]
B1_count_10Khz[1] = DFFEAS(B1L48, B1_clock_100Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_10Khz[2] is clk_div:inst|count_10Khz[2]
B1_count_10Khz[2] = DFFEAS(B1L51, B1_clock_100Khz_reg,  ,  ,  ,  ,  ,  ,  );


--B1L7 is clk_div:inst|clock_10Khz_int~23
B1L7 = B1_clock_10Khz_int $ (!B1_count_10Khz[0] & !B1_count_10Khz[1] & B1_count_10Khz[2]);


--B1_clock_100Khz_reg is clk_div:inst|clock_100Khz_reg
B1_clock_100Khz_reg = DFFEAS(B1_clock_100Khz_int, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--B1L50 is clk_div:inst|count_10Khz~56
B1L50 = !B1_count_10Khz[0] & (B1_count_10Khz[1] # !B1_count_10Khz[2]);


--B1L48 is clk_div:inst|count_10Khz[1]~57
B1L48 = B1_count_10Khz[0] $ B1_count_10Khz[1];


--B1L51 is clk_div:inst|count_10Khz~58
B1L51 = B1_count_10Khz[0] & (B1_count_10Khz[1] $ B1_count_10Khz[2]) # !B1_count_10Khz[0] & B1_count_10Khz[1] & B1_count_10Khz[2];


--B1_clock_100Khz_int is clk_div:inst|clock_100Khz_int
B1_clock_100Khz_int = DFFEAS(B1L14, B1_clock_1Mhz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_100Khz[0] is clk_div:inst|count_100Khz[0]
B1_count_100Khz[0] = DFFEAS(B1L64, B1_clock_1Mhz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_100Khz[1] is clk_div:inst|count_100Khz[1]
B1_count_100Khz[1] = DFFEAS(B1L62, B1_clock_1Mhz_reg,  ,  ,  ,  ,  ,  ,  );


--B1_count_100Khz[2] is clk_div:inst|count_100Khz[2]
B1_count_100Khz[2] = DFFEAS(B1L65, B1_clock_1Mhz_reg,  ,  ,  ,  ,  ,  ,  );


--B1L14 is clk_div:inst|clock_100Khz_int~23
B1L14 = B1_clock_100Khz_int $ (!B1_count_100Khz[0] & !B1_count_100Khz[1] & B1_count_100Khz[2]);


--B1_clock_1Mhz_reg is clk_div:inst|clock_1Mhz_reg
B1_clock_1Mhz_reg = DFFEAS(B1_clock_1Mhz_int, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--B1L64 is clk_div:inst|count_100Khz~56
B1L64 = !B1_count_100Khz[0] & (B1_count_100Khz[1] # !B1_count_100Khz[2]);


--B1L62 is clk_div:inst|count_100Khz[1]~57
B1L62 = B1_count_100Khz[0] $ B1_count_100Khz[1];


--B1L65 is clk_div:inst|count_100Khz~58
B1L65 = B1_count_100Khz[0] & (B1_count_100Khz[1] $ B1_count_100Khz[2]) # !B1_count_100Khz[0] & B1_count_100Khz[1] & B1_count_100Khz[2];


--B1_clock_1Mhz_int is clk_div:inst|clock_1Mhz_int
B1_clock_1Mhz_int = DFFEAS(B1L68, CLK_48Mhz,  ,  ,  ,  ,  ,  ,  );


--B1_count_1Mhz[3] is clk_div:inst|count_1Mhz[3]
B1_count_1Mhz[3] = DFFEAS(B1L34, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1_count_1Mhz[4] is clk_div:inst|count_1Mhz[4]
B1_count_1Mhz[4] = DFFEAS(B1L37, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1_count_1Mhz[5] is clk_div:inst|count_1Mhz[5]
B1_count_1Mhz[5] = DFFEAS(B1L40, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1_count_1Mhz[6] is clk_div:inst|count_1Mhz[6]
B1_count_1Mhz[6] = DFFEAS(B1L43, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1L68 is clk_div:inst|LessThan1~83
B1L68 = B1_count_1Mhz[5] # B1_count_1Mhz[6] # B1_count_1Mhz[3] & B1_count_1Mhz[4];


--B1_count_1Mhz[2] is clk_div:inst|count_1Mhz[2]
B1_count_1Mhz[2] = DFFEAS(B1L31, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1_count_1Mhz[1] is clk_div:inst|count_1Mhz[1]
B1_count_1Mhz[1] = DFFEAS(B1L28, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1_count_1Mhz[0] is clk_div:inst|count_1Mhz[0]
B1_count_1Mhz[0] = DFFEAS(B1L25, CLK_48Mhz,  ,  ,  ,  ,  , B1L67,  );


--B1L25 is clk_div:inst|count_1Mhz[0]~62
B1L25 = B1_count_1Mhz[0] $ VCC;

--B1L26 is clk_div:inst|count_1Mhz[0]~100
B1L26 = CARRY(B1_count_1Mhz[0]);


--B1L28 is clk_div:inst|count_1Mhz[1]~63
B1L28 = B1_count_1Mhz[1] & !B1L26 # !B1_count_1Mhz[1] & (B1L26 # GND);

--B1L29 is clk_div:inst|count_1Mhz[1]~101
B1L29 = CARRY(!B1L26 # !B1_count_1Mhz[1]);


--B1L31 is clk_div:inst|count_1Mhz[2]~64
B1L31 = B1_count_1Mhz[2] & (B1L29 $ GND) # !B1_count_1Mhz[2] & !B1L29 & VCC;

--B1L32 is clk_div:inst|count_1Mhz[2]~102
B1L32 = CARRY(B1_count_1Mhz[2] & !B1L29);


--B1L34 is clk_div:inst|count_1Mhz[3]~60
B1L34 = B1_count_1Mhz[3] & !B1L32 # !B1_count_1Mhz[3] & (B1L32 # GND);

--B1L35 is clk_div:inst|count_1Mhz[3]~103
B1L35 = CARRY(!B1L32 # !B1_count_1Mhz[3]);


--B1L66 is clk_div:inst|LessThan0~109
B1L66 = !B1_count_1Mhz[0] # !B1_count_1Mhz[1] # !B1_count_1Mhz[2] # !B1_count_1Mhz[3];


--B1L67 is clk_div:inst|LessThan0~110
B1L67 = B1_count_1Mhz[6] # B1_count_1Mhz[5] & (B1_count_1Mhz[4] # !B1L66);


--B1L37 is clk_div:inst|count_1Mhz[4]~61
B1L37 = B1_count_1Mhz[4] & (B1L35 $ GND) # !B1_count_1Mhz[4] & !B1L35 & VCC;

--B1L38 is clk_div:inst|count_1Mhz[4]~104
B1L38 = CARRY(B1_count_1Mhz[4] & !B1L35);


--B1L40 is clk_div:inst|count_1Mhz[5]~58
B1L40 = B1_count_1Mhz[5] & !B1L38 # !B1_count_1Mhz[5] & (B1L38 # GND);

--B1L41 is clk_div:inst|count_1Mhz[5]~105
B1L41 = CARRY(!B1L38 # !B1_count_1Mhz[5]);


--B1L43 is clk_div:inst|count_1Mhz[6]~59
B1L43 = B1_count_1Mhz[6] $ !B1L41;


--E1L8 is debounce:inst3|SHIFT_PB[3]~8
E1L8 = !SW4;


--SW8 is SW8
--operation mode is input

SW8 = INPUT();


--CLK_48Mhz is CLK_48Mhz
--operation mode is input

CLK_48Mhz = INPUT();


--SW4 is SW4
--operation mode is input

SW4 = INPUT();


--LCD_RS is LCD_RS
--operation mode is output

LCD_RS = OUTPUT(C1_LCD_RS);


--LCD_E is LCD_E
--operation mode is output

LCD_E = OUTPUT(!C1_LCD_E);


--LCD_RW is LCD_RW
--operation mode is output

LCD_RW = OUTPUT(!C1_LCD_RW_INT);


--DATA_BUS[7] is DATA_BUS[7]
--operation mode is bidir

DATA_BUS[7]_tri_out = TRI(C1_DATA_BUS_VALUE[7], C1_LCD_RW_INT);
DATA_BUS[7] = BIDIR(DATA_BUS[7]_tri_out);


--DATA_BUS[6] is DATA_BUS[6]
--operation mode is bidir

DATA_BUS[6]_tri_out = TRI(C1_DATA_BUS_VALUE[6], C1_LCD_RW_INT);
DATA_BUS[6] = BIDIR(DATA_BUS[6]_tri_out);


--DATA_BUS[5] is DATA_BUS[5]
--operation mode is bidir

DATA_BUS[5]_tri_out = TRI(!C1_DATA_BUS_VALUE[5], C1_LCD_RW_INT);
DATA_BUS[5] = BIDIR(DATA_BUS[5]_tri_out);


--DATA_BUS[4] is DATA_BUS[4]
--operation mode is bidir

DATA_BUS[4]_tri_out = TRI(!C1_DATA_BUS_VALUE[4], C1_LCD_RW_INT);
DATA_BUS[4] = BIDIR(DATA_BUS[4]_tri_out);


--DATA_BUS[3] is DATA_BUS[3]
--operation mode is bidir

DATA_BUS[3]_tri_out = TRI(!C1_DATA_BUS_VALUE[3], C1_LCD_RW_INT);
DATA_BUS[3] = BIDIR(DATA_BUS[3]_tri_out);


--DATA_BUS[2] is DATA_BUS[2]
--operation mode is bidir

DATA_BUS[2]_tri_out = TRI(C1_DATA_BUS_VALUE[2], C1_LCD_RW_INT);
DATA_BUS[2] = BIDIR(DATA_BUS[2]_tri_out);


--DATA_BUS[1] is DATA_BUS[1]
--operation mode is bidir

DATA_BUS[1]_tri_out = TRI(C1_DATA_BUS_VALUE[1], C1_LCD_RW_INT);
DATA_BUS[1] = BIDIR(DATA_BUS[1]_tri_out);


--DATA_BUS[0] is DATA_BUS[0]
--operation mode is bidir

DATA_BUS[0]_tri_out = TRI(C1_DATA_BUS_VALUE[0], C1_LCD_RW_INT);
DATA_BUS[0] = BIDIR(DATA_BUS[0]_tri_out);


